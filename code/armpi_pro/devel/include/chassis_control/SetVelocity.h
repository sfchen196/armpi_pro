// Generated by gencpp from file chassis_control/SetVelocity.msg
// DO NOT EDIT!


#ifndef CHASSIS_CONTROL_MESSAGE_SETVELOCITY_H
#define CHASSIS_CONTROL_MESSAGE_SETVELOCITY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace chassis_control
{
template <class ContainerAllocator>
struct SetVelocity_
{
  typedef SetVelocity_<ContainerAllocator> Type;

  SetVelocity_()
    : velocity(0.0)
    , direction(0.0)
    , angular(0.0)  {
    }
  SetVelocity_(const ContainerAllocator& _alloc)
    : velocity(0.0)
    , direction(0.0)
    , angular(0.0)  {
  (void)_alloc;
    }



   typedef double _velocity_type;
  _velocity_type velocity;

   typedef double _direction_type;
  _direction_type direction;

   typedef double _angular_type;
  _angular_type angular;





  typedef boost::shared_ptr< ::chassis_control::SetVelocity_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::chassis_control::SetVelocity_<ContainerAllocator> const> ConstPtr;

}; // struct SetVelocity_

typedef ::chassis_control::SetVelocity_<std::allocator<void> > SetVelocity;

typedef boost::shared_ptr< ::chassis_control::SetVelocity > SetVelocityPtr;
typedef boost::shared_ptr< ::chassis_control::SetVelocity const> SetVelocityConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::chassis_control::SetVelocity_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::chassis_control::SetVelocity_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::chassis_control::SetVelocity_<ContainerAllocator1> & lhs, const ::chassis_control::SetVelocity_<ContainerAllocator2> & rhs)
{
  return lhs.velocity == rhs.velocity &&
    lhs.direction == rhs.direction &&
    lhs.angular == rhs.angular;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::chassis_control::SetVelocity_<ContainerAllocator1> & lhs, const ::chassis_control::SetVelocity_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace chassis_control

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::chassis_control::SetVelocity_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::chassis_control::SetVelocity_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::chassis_control::SetVelocity_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::chassis_control::SetVelocity_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::chassis_control::SetVelocity_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::chassis_control::SetVelocity_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::chassis_control::SetVelocity_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c6ffb1426a0612ef45289abb145aeb72";
  }

  static const char* value(const ::chassis_control::SetVelocity_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc6ffb1426a0612efULL;
  static const uint64_t static_value2 = 0x45289abb145aeb72ULL;
};

template<class ContainerAllocator>
struct DataType< ::chassis_control::SetVelocity_<ContainerAllocator> >
{
  static const char* value()
  {
    return "chassis_control/SetVelocity";
  }

  static const char* value(const ::chassis_control::SetVelocity_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::chassis_control::SetVelocity_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 velocity\n"
"float64 direction\n"
"float64 angular\n"
"\n"
;
  }

  static const char* value(const ::chassis_control::SetVelocity_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::chassis_control::SetVelocity_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.velocity);
      stream.next(m.direction);
      stream.next(m.angular);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SetVelocity_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::chassis_control::SetVelocity_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::chassis_control::SetVelocity_<ContainerAllocator>& v)
  {
    s << indent << "velocity: ";
    Printer<double>::stream(s, indent + "  ", v.velocity);
    s << indent << "direction: ";
    Printer<double>::stream(s, indent + "  ", v.direction);
    s << indent << "angular: ";
    Printer<double>::stream(s, indent + "  ", v.angular);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CHASSIS_CONTROL_MESSAGE_SETVELOCITY_H
