// Generated by gencpp from file chassis_control/SetTranslation.msg
// DO NOT EDIT!


#ifndef CHASSIS_CONTROL_MESSAGE_SETTRANSLATION_H
#define CHASSIS_CONTROL_MESSAGE_SETTRANSLATION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace chassis_control
{
template <class ContainerAllocator>
struct SetTranslation_
{
  typedef SetTranslation_<ContainerAllocator> Type;

  SetTranslation_()
    : velocity_x(0.0)
    , velocity_y(0.0)  {
    }
  SetTranslation_(const ContainerAllocator& _alloc)
    : velocity_x(0.0)
    , velocity_y(0.0)  {
  (void)_alloc;
    }



   typedef double _velocity_x_type;
  _velocity_x_type velocity_x;

   typedef double _velocity_y_type;
  _velocity_y_type velocity_y;





  typedef boost::shared_ptr< ::chassis_control::SetTranslation_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::chassis_control::SetTranslation_<ContainerAllocator> const> ConstPtr;

}; // struct SetTranslation_

typedef ::chassis_control::SetTranslation_<std::allocator<void> > SetTranslation;

typedef boost::shared_ptr< ::chassis_control::SetTranslation > SetTranslationPtr;
typedef boost::shared_ptr< ::chassis_control::SetTranslation const> SetTranslationConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::chassis_control::SetTranslation_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::chassis_control::SetTranslation_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::chassis_control::SetTranslation_<ContainerAllocator1> & lhs, const ::chassis_control::SetTranslation_<ContainerAllocator2> & rhs)
{
  return lhs.velocity_x == rhs.velocity_x &&
    lhs.velocity_y == rhs.velocity_y;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::chassis_control::SetTranslation_<ContainerAllocator1> & lhs, const ::chassis_control::SetTranslation_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace chassis_control

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::chassis_control::SetTranslation_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::chassis_control::SetTranslation_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::chassis_control::SetTranslation_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::chassis_control::SetTranslation_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::chassis_control::SetTranslation_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::chassis_control::SetTranslation_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::chassis_control::SetTranslation_<ContainerAllocator> >
{
  static const char* value()
  {
    return "95bfb17779ecc69913dbb2e0513e19d5";
  }

  static const char* value(const ::chassis_control::SetTranslation_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x95bfb17779ecc699ULL;
  static const uint64_t static_value2 = 0x13dbb2e0513e19d5ULL;
};

template<class ContainerAllocator>
struct DataType< ::chassis_control::SetTranslation_<ContainerAllocator> >
{
  static const char* value()
  {
    return "chassis_control/SetTranslation";
  }

  static const char* value(const ::chassis_control::SetTranslation_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::chassis_control::SetTranslation_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 velocity_x\n"
"float64 velocity_y\n"
;
  }

  static const char* value(const ::chassis_control::SetTranslation_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::chassis_control::SetTranslation_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.velocity_x);
      stream.next(m.velocity_y);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SetTranslation_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::chassis_control::SetTranslation_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::chassis_control::SetTranslation_<ContainerAllocator>& v)
  {
    s << indent << "velocity_x: ";
    Printer<double>::stream(s, indent + "  ", v.velocity_x);
    s << indent << "velocity_y: ";
    Printer<double>::stream(s, indent + "  ", v.velocity_y);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CHASSIS_CONTROL_MESSAGE_SETTRANSLATION_H
