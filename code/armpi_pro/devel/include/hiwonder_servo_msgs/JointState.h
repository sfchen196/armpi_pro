// Generated by gencpp from file hiwonder_servo_msgs/JointState.msg
// DO NOT EDIT!


#ifndef HIWONDER_SERVO_MSGS_MESSAGE_JOINTSTATE_H
#define HIWONDER_SERVO_MSGS_MESSAGE_JOINTSTATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace hiwonder_servo_msgs
{
template <class ContainerAllocator>
struct JointState_
{
  typedef JointState_<ContainerAllocator> Type;

  JointState_()
    : header()
    , name()
    , servo_ids()
    , servo_temps()
    , goal_pos(0.0)
    , current_pos(0.0)
    , error(0.0)
    , velocity(0.0)  {
    }
  JointState_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , name(_alloc)
    , servo_ids(_alloc)
    , servo_temps(_alloc)
    , goal_pos(0.0)
    , current_pos(0.0)
    , error(0.0)
    , velocity(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _name_type;
  _name_type name;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _servo_ids_type;
  _servo_ids_type servo_ids;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _servo_temps_type;
  _servo_temps_type servo_temps;

   typedef double _goal_pos_type;
  _goal_pos_type goal_pos;

   typedef double _current_pos_type;
  _current_pos_type current_pos;

   typedef double _error_type;
  _error_type error;

   typedef double _velocity_type;
  _velocity_type velocity;





  typedef boost::shared_ptr< ::hiwonder_servo_msgs::JointState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hiwonder_servo_msgs::JointState_<ContainerAllocator> const> ConstPtr;

}; // struct JointState_

typedef ::hiwonder_servo_msgs::JointState_<std::allocator<void> > JointState;

typedef boost::shared_ptr< ::hiwonder_servo_msgs::JointState > JointStatePtr;
typedef boost::shared_ptr< ::hiwonder_servo_msgs::JointState const> JointStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hiwonder_servo_msgs::JointState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hiwonder_servo_msgs::JointState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::hiwonder_servo_msgs::JointState_<ContainerAllocator1> & lhs, const ::hiwonder_servo_msgs::JointState_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.name == rhs.name &&
    lhs.servo_ids == rhs.servo_ids &&
    lhs.servo_temps == rhs.servo_temps &&
    lhs.goal_pos == rhs.goal_pos &&
    lhs.current_pos == rhs.current_pos &&
    lhs.error == rhs.error &&
    lhs.velocity == rhs.velocity;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::hiwonder_servo_msgs::JointState_<ContainerAllocator1> & lhs, const ::hiwonder_servo_msgs::JointState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace hiwonder_servo_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::hiwonder_servo_msgs::JointState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hiwonder_servo_msgs::JointState_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hiwonder_servo_msgs::JointState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hiwonder_servo_msgs::JointState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hiwonder_servo_msgs::JointState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hiwonder_servo_msgs::JointState_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hiwonder_servo_msgs::JointState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "75d2bf646c2006bb7f480fbc9d7d4db7";
  }

  static const char* value(const ::hiwonder_servo_msgs::JointState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x75d2bf646c2006bbULL;
  static const uint64_t static_value2 = 0x7f480fbc9d7d4db7ULL;
};

template<class ContainerAllocator>
struct DataType< ::hiwonder_servo_msgs::JointState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hiwonder_servo_msgs/JointState";
  }

  static const char* value(const ::hiwonder_servo_msgs::JointState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hiwonder_servo_msgs::JointState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"string name         # joint name\n"
"int32[] servo_ids   # motor ids controlling this joint\n"
"int32[] servo_temps # motor temperatures, same order as motor_ids\n"
"\n"
"float64 goal_pos    # commanded position (in radians)\n"
"float64 current_pos # current joint position (in radians)\n"
"float64 error       # error between commanded and current positions (in radians)\n"
"float64 velocity    # current joint speed (in radians per second)\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::hiwonder_servo_msgs::JointState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hiwonder_servo_msgs::JointState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.name);
      stream.next(m.servo_ids);
      stream.next(m.servo_temps);
      stream.next(m.goal_pos);
      stream.next(m.current_pos);
      stream.next(m.error);
      stream.next(m.velocity);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct JointState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hiwonder_servo_msgs::JointState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hiwonder_servo_msgs::JointState_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name);
    s << indent << "servo_ids[]" << std::endl;
    for (size_t i = 0; i < v.servo_ids.size(); ++i)
    {
      s << indent << "  servo_ids[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.servo_ids[i]);
    }
    s << indent << "servo_temps[]" << std::endl;
    for (size_t i = 0; i < v.servo_temps.size(); ++i)
    {
      s << indent << "  servo_temps[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.servo_temps[i]);
    }
    s << indent << "goal_pos: ";
    Printer<double>::stream(s, indent + "  ", v.goal_pos);
    s << indent << "current_pos: ";
    Printer<double>::stream(s, indent + "  ", v.current_pos);
    s << indent << "error: ";
    Printer<double>::stream(s, indent + "  ", v.error);
    s << indent << "velocity: ";
    Printer<double>::stream(s, indent + "  ", v.velocity);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HIWONDER_SERVO_MSGS_MESSAGE_JOINTSTATE_H
