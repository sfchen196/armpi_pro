// Generated by gencpp from file hiwonder_servo_msgs/ServoStateList.msg
// DO NOT EDIT!


#ifndef HIWONDER_SERVO_MSGS_MESSAGE_SERVOSTATELIST_H
#define HIWONDER_SERVO_MSGS_MESSAGE_SERVOSTATELIST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <hiwonder_servo_msgs/ServoState.h>

namespace hiwonder_servo_msgs
{
template <class ContainerAllocator>
struct ServoStateList_
{
  typedef ServoStateList_<ContainerAllocator> Type;

  ServoStateList_()
    : servo_states()  {
    }
  ServoStateList_(const ContainerAllocator& _alloc)
    : servo_states(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::hiwonder_servo_msgs::ServoState_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::hiwonder_servo_msgs::ServoState_<ContainerAllocator> >::other >  _servo_states_type;
  _servo_states_type servo_states;





  typedef boost::shared_ptr< ::hiwonder_servo_msgs::ServoStateList_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hiwonder_servo_msgs::ServoStateList_<ContainerAllocator> const> ConstPtr;

}; // struct ServoStateList_

typedef ::hiwonder_servo_msgs::ServoStateList_<std::allocator<void> > ServoStateList;

typedef boost::shared_ptr< ::hiwonder_servo_msgs::ServoStateList > ServoStateListPtr;
typedef boost::shared_ptr< ::hiwonder_servo_msgs::ServoStateList const> ServoStateListConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hiwonder_servo_msgs::ServoStateList_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hiwonder_servo_msgs::ServoStateList_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::hiwonder_servo_msgs::ServoStateList_<ContainerAllocator1> & lhs, const ::hiwonder_servo_msgs::ServoStateList_<ContainerAllocator2> & rhs)
{
  return lhs.servo_states == rhs.servo_states;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::hiwonder_servo_msgs::ServoStateList_<ContainerAllocator1> & lhs, const ::hiwonder_servo_msgs::ServoStateList_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace hiwonder_servo_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::hiwonder_servo_msgs::ServoStateList_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hiwonder_servo_msgs::ServoStateList_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hiwonder_servo_msgs::ServoStateList_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hiwonder_servo_msgs::ServoStateList_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hiwonder_servo_msgs::ServoStateList_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hiwonder_servo_msgs::ServoStateList_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hiwonder_servo_msgs::ServoStateList_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9a071e2c8f2c9207110dcfde37177dda";
  }

  static const char* value(const ::hiwonder_servo_msgs::ServoStateList_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9a071e2c8f2c9207ULL;
  static const uint64_t static_value2 = 0x110dcfde37177ddaULL;
};

template<class ContainerAllocator>
struct DataType< ::hiwonder_servo_msgs::ServoStateList_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hiwonder_servo_msgs/ServoStateList";
  }

  static const char* value(const ::hiwonder_servo_msgs::ServoStateList_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hiwonder_servo_msgs::ServoStateList_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ServoState[] servo_states\n"
"================================================================================\n"
"MSG: hiwonder_servo_msgs/ServoState\n"
"float64 timestamp   # motor state is at this time\n"
"int32 id            # motor id\n"
"int32 goal          # commanded position (in encoder units)\n"
"int32 position      # current position (in encoder units)\n"
"int32 error         # difference between current and goal positions\n"
"int32 voltage       # current voltage (mv)\n"
;
  }

  static const char* value(const ::hiwonder_servo_msgs::ServoStateList_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hiwonder_servo_msgs::ServoStateList_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.servo_states);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ServoStateList_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hiwonder_servo_msgs::ServoStateList_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hiwonder_servo_msgs::ServoStateList_<ContainerAllocator>& v)
  {
    s << indent << "servo_states[]" << std::endl;
    for (size_t i = 0; i < v.servo_states.size(); ++i)
    {
      s << indent << "  servo_states[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::hiwonder_servo_msgs::ServoState_<ContainerAllocator> >::stream(s, indent + "    ", v.servo_states[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // HIWONDER_SERVO_MSGS_MESSAGE_SERVOSTATELIST_H
