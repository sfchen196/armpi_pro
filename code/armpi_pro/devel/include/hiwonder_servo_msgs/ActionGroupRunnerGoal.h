// Generated by gencpp from file hiwonder_servo_msgs/ActionGroupRunnerGoal.msg
// DO NOT EDIT!


#ifndef HIWONDER_SERVO_MSGS_MESSAGE_ACTIONGROUPRUNNERGOAL_H
#define HIWONDER_SERVO_MSGS_MESSAGE_ACTIONGROUPRUNNERGOAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace hiwonder_servo_msgs
{
template <class ContainerAllocator>
struct ActionGroupRunnerGoal_
{
  typedef ActionGroupRunnerGoal_<ContainerAllocator> Type;

  ActionGroupRunnerGoal_()
    : name()
    , repeat(0)  {
    }
  ActionGroupRunnerGoal_(const ContainerAllocator& _alloc)
    : name(_alloc)
    , repeat(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _name_type;
  _name_type name;

   typedef uint32_t _repeat_type;
  _repeat_type repeat;





  typedef boost::shared_ptr< ::hiwonder_servo_msgs::ActionGroupRunnerGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hiwonder_servo_msgs::ActionGroupRunnerGoal_<ContainerAllocator> const> ConstPtr;

}; // struct ActionGroupRunnerGoal_

typedef ::hiwonder_servo_msgs::ActionGroupRunnerGoal_<std::allocator<void> > ActionGroupRunnerGoal;

typedef boost::shared_ptr< ::hiwonder_servo_msgs::ActionGroupRunnerGoal > ActionGroupRunnerGoalPtr;
typedef boost::shared_ptr< ::hiwonder_servo_msgs::ActionGroupRunnerGoal const> ActionGroupRunnerGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hiwonder_servo_msgs::ActionGroupRunnerGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hiwonder_servo_msgs::ActionGroupRunnerGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::hiwonder_servo_msgs::ActionGroupRunnerGoal_<ContainerAllocator1> & lhs, const ::hiwonder_servo_msgs::ActionGroupRunnerGoal_<ContainerAllocator2> & rhs)
{
  return lhs.name == rhs.name &&
    lhs.repeat == rhs.repeat;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::hiwonder_servo_msgs::ActionGroupRunnerGoal_<ContainerAllocator1> & lhs, const ::hiwonder_servo_msgs::ActionGroupRunnerGoal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace hiwonder_servo_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::hiwonder_servo_msgs::ActionGroupRunnerGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hiwonder_servo_msgs::ActionGroupRunnerGoal_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hiwonder_servo_msgs::ActionGroupRunnerGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hiwonder_servo_msgs::ActionGroupRunnerGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hiwonder_servo_msgs::ActionGroupRunnerGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hiwonder_servo_msgs::ActionGroupRunnerGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hiwonder_servo_msgs::ActionGroupRunnerGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "25bab19f14cbfba689c136edaf583c54";
  }

  static const char* value(const ::hiwonder_servo_msgs::ActionGroupRunnerGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x25bab19f14cbfba6ULL;
  static const uint64_t static_value2 = 0x89c136edaf583c54ULL;
};

template<class ContainerAllocator>
struct DataType< ::hiwonder_servo_msgs::ActionGroupRunnerGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hiwonder_servo_msgs/ActionGroupRunnerGoal";
  }

  static const char* value(const ::hiwonder_servo_msgs::ActionGroupRunnerGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hiwonder_servo_msgs::ActionGroupRunnerGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"string name\n"
"uint32 repeat\n"
;
  }

  static const char* value(const ::hiwonder_servo_msgs::ActionGroupRunnerGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hiwonder_servo_msgs::ActionGroupRunnerGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.name);
      stream.next(m.repeat);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ActionGroupRunnerGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hiwonder_servo_msgs::ActionGroupRunnerGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hiwonder_servo_msgs::ActionGroupRunnerGoal_<ContainerAllocator>& v)
  {
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name);
    s << indent << "repeat: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.repeat);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HIWONDER_SERVO_MSGS_MESSAGE_ACTIONGROUPRUNNERGOAL_H
